@page "/reservations"
@using FlightReservations.Data
@using System
@using System.IO
@inject IJSRuntime JS

<link href="./css/FlightReservation.css" rel="stylesheet" />

<section id="ReservationFinder">
    <h1>Reservation Finder</h1>
    <div class="flex-container">
        <!-- First Row -->
        <div class=flex-row>
            <div class="flex-item">
                <label for="code">Code:</label>
            </div>
            <div class="flex-item">
                <label for="airline">Airline:</label>
            </div>
            <div class="flex-item">
                <label for="name">Name:</label>
            </div>
            <div class="flex-item">
                <!-- Blank space for alignment -->
            </div>
        </div>
        <!-- Second Row -->
        <div class="flex-row">
            <div class="flex-item">
                <input type="text" id="code" placeholder="Any" @bind="code" />
            </div>
            <div class="flex-item">
                <input type="text" id="airline" placeholder="Any" @bind="airline" @bind:event="oninput" @onkeydown="HandleKeyDown" />
                @if (filteredAirlines.Any())
                {
                    <ul class="filtered-airlines-list">
                        @foreach (var airline in filteredAirlines)
                        {
                            <li>@airline</li>
                        }
                    </ul>
                }
                else if (!string.IsNullOrWhiteSpace(airline))
                {
                    <p>No airlines found matching "@airline".</p>
                }
            </div>
            <div class="flex-item">
                <input type="text" id="name" placeholder="Any" @bind="name" />
            </div>
            <div class="flex-item">
                <button type="button" @onclick="OnFindReservations">Find Reservations</button>
            </div>
        </div> 
    </div>
</section>
 
<section id="Reservations">
    <h2>Reservations</h2>
    <select class="flex-row" @onchange="OnShowFlightReserved">
        <option value="">Select a reservation</option>
        @foreach (var reservation in reservations)
        {
            <option value="@reservation.ReservationCode">
                @reservation.ReservationCode, @reservation.Airline, @reservation.TravelerName, @reservation.TravelerCitizen
            </option>
        }
    </select>
</section> 

<section id="Reserve">
    <h2>Reserve</h2>
    <div>
        <p>Reservation Code:</p>
        <input class="flex-row" type="text" value="@selectedReservationCode" disabled />
    </div>
    <div>
        <p>Flight Code:</p>
        <input class="flex-row" type="text" value="@selectedFlightCode" disabled />
    </div>
    <div>
        <p>Airline:</p>
        <input class="flex-row" type="text" value="@selectedAirline" disabled />
    </div>
    <div>
        <p>Day:</p>
        <input class="flex-row" type="text" value="@selectedDay" disabled />
    </div>
    <div>
        <p>Time:</p>
        <input class="flex-row" type="text" value="@selectedTime" disabled />
    </div>
    <div>
        <p>Cost:</p>
        <input class="flex-row" type="text" value="@selectedCost" disabled />
    </div>
    <div>
        <p>Name:</p>
        <input class="flex-row" type="text" @bind="@selectedTravelerName" />
    </div>
    <div>
        <p>Citizenship:</p>
        <input class="flex-row" type="text" @bind="@selectedTravelerCitizen" />
    </div>
    <div>
        <p>Status:</p>
        <input class="flex-row" type="text" @bind="@selectedStatus" />
    </div>
    <div class="center-button-container">
        <br />
        <button @onclick="SaveReservations">Save</button>
    </div>
</section> 

@code {
    private List<Reservation> reservations;
    ReservationManager rm = new ReservationManager();
    private Reservation? reservationSelected;
    private List<Reservation> matchingReservations;

    string? selectedReservationCode = null;
    string? selectedFlightCode = null;
    string? selectedAirline = null;
    string? selectedDay = null;
    string? selectedTime = null;
    int? selectedCost;
    string? selectedTravelerName = null;
    string? selectedTravelerCitizen = null;
    string? selectedStatus = null;
    string code = string.Empty;
    string airline = string.Empty;
    string name = string.Empty;

    string errorMessage;

    AirportManager am = new AirportManager();
    FlightManager fm = new FlightManager();


    // Initialization logic
    protected override void OnInitialized()
    {
        base.OnInitialized();
        reservations = ReservationManager.GetReservations();
    }

    private List<Airport> airlineList = AirportManager.GetAirportNames();
    private IEnumerable<string> filteredAirlines => airlineList
        .Where(airport => airport.AirportName.Contains(airline, StringComparison.OrdinalIgnoreCase))
        .Select(airport => airport.AirportName);

    //OnFindFlights method: This method is called when the "Find Flights" button is clicked.
    //Calls FindFlights method in FlightManager class and finds flight based on origin, destination and day.
    private void OnFindReservations()
    {
        matchingReservations = rm.FindReservations(code, airline, name, reservations);
    }

    //OnShowFlight method: This method is called when a flight is selected from the dropdown.
    //Sets flightCode to value based on change event. Then calls SelectFlight method to display flight information.
    private void OnShowFlightReserved(ChangeEventArgs e)
    {
        var selectedCode = e.Value?.ToString();

        if (string.IsNullOrEmpty(selectedCode))
        {
            // Reset fields
            selectedReservationCode = null;
            selectedAirline = null;
            selectedCost = null;
            selectedTravelerName = null;
            selectedTravelerCitizen = null;
            selectedDay = null;
            selectedTime = null;
            selectedFlightCode = null;
            selectedStatus = null;
        }
        else
        {
            // Find and populate the selected reservation
            var reservation = reservations.FirstOrDefault(r => r.ReservationCode == selectedCode);
            if (reservation != null)
            {
                PopulateReservationDetails(reservation);
            }
        }
    }

     private void PopulateReservationDetails(Reservation reservation)
    {
        selectedReservationCode = reservation.ReservationCode;
        selectedAirline = reservation.Airline;
        selectedCost = reservation.Cost;
        selectedTravelerName = reservation.TravelerName;
        selectedTravelerCitizen = reservation.TravelerCitizen;
        selectedDay = reservation.Day;
        selectedTime = reservation.Time;
        selectedFlightCode = reservation.FlightCode;
        selectedStatus  = reservation.Status;
    }

    private void SaveReservations()
    {
        rm.UpdateReservation();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "Tab")
        {
            // Prevent the default behavior to handle selection
            await JS.InvokeVoidAsync("event.preventDefault");

            // Example logic to select the first airline in the filtered list
            // You might want to implement more sophisticated selection logic
            if (filteredAirlines.Any())
            {
                SelectAirline(filteredAirlines.First());
            }
        }
    }

    private void SelectAirline(string airline)
    {
        this.airline = airline;
    }
} 