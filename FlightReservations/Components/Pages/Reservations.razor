@page "/reservations"
@using FlightReservations.Data
@using System.IO
@inject IJSRuntime JS

<style>
    <!--TODO: Add CSS to a new css file-->
    p {
        text-align: left;
    }

    h1, h2 {
        text-align: center;
        padding: 20px;
    }

    button {
        background-color: deepskyblue;
        color: white;
        border: solid 1px deepskyblue;
        position: center;
        align-items: center;
    }

    p {
        margin: 0;
    }

    .flex-container {
        display: flex;
        flex-wrap: wrap;
    }

    .flex-row {
        width: 100%; /* Make each row take the full width */
        display: flex; /* Apply flex to each row for alignment */
        column-gap: 10px;
    }

    .flex-item {
        flex: 1 1 25%; /* Grow to fill 1/4th of the container */
        box-sizing: border-box;
    }

    .flex-item label, .flex-item input, .flex-item button {
        width: 100%;
        display: block; /* Make label, input, and button take the full width of the flex item */
    }

    .filtered-airlines-list {
        display: none; /* Hide by default */
    }

    #airline:focus + .filtered-airlines-list,
    #airline:hover + .filtered-airlines-list {
        display:flow; /* Show when input is focused or hovered */
    }

</style> 

<section id="ReservationFinder">
    <h1>Reservation Finder</h1>
    <div class="flex-container">
        <!-- First Row -->
        <div class=flex-row>
            <div class="flex-item">
                <label for="code">Code:</label>
            </div>
            <div class="flex-item">
                <label for="airline">Airline:</label>
            </div>
            <div class="flex-item">
                <label for="name">Name:</label>
            </div>
            <div class="flex-item">
                <!-- Blank space for alignment -->
            </div>
        </div>
        <!-- Second Row -->
        <div class="flex-row">
            <div class="flex-item">
                <input type="text" id="code" placeholder="Any" @bind="code" />
            </div>
            <div class="flex-item">
                <input type="text" id="airline" placeholder="Any" @bind="airline" @bind:event="oninput" @onkeydown="HandleKeyDown" />
                @if (filteredAirlines.Any())
                {
                    <ul class="filtered-airlines-list">
                        @foreach (var airline in filteredAirlines)
                        {
                            <li>@airline</li>
                        }
                    </ul>
                }
                else if (!string.IsNullOrWhiteSpace(airline))
                {
                    <p>No airlines found matching "@airline".</p>
                }
            </div>
            <div class="flex-item">
                <input type="text" id="name" placeholder="Any" @bind="name" />
            </div>
            <div class="flex-item">
                <button type="button" @onclick="OnFindReservations">Find Reservations</button>
            </div>
        </div> 
    </div>
</section>
 
<section id="Reservations">
    <h2>Reservations</h2>
@*     <select class="flex-row" @onchange="OnShowFlightReserved">
        <option disabled selected>Select a reservation</option>
        @foreach (var reservation in matchingReservations)
        {
            if (matchingReservations != null)
            {
                <option value="@reservation">
                    @reservation.ReservationCode,
                    @reservation.Airline,
                    @reservation.TravelerName,
                    @reservation.TravelerCitizen,
                    @reservation.TravelerCitizen
                </option>
            }
        }
    </select> *@
</section> 

<section id="Reserve">
    <h2>Reserve</h2>
    <div>
        <p>Reservation Code:</p>
        <input class="flex-row" type="text" value="@selectedReservationCode" disabled />
    </div>
    <div>
        <p>Flight Code:</p>
        <input class="flex-row" type="text" value="@selectedFlightCode" disabled />
    </div>
    <div>
        <p>Airline:</p>
        <input class="flex-row" type="text" value="@selectedAirline" disabled />
    </div>
    <div>
        <p>Day:</p>
        <input class="flex-row" type="text" value="@selectedDay" disabled />
    </div>
    <div>
        <p>Time:</p>
        <input class="flex-row" type="text" value="@selectedTime" disabled />
    </div>
    <div>
        <p>Cost:</p>
        <input class="flex-row" type="text" value="@selectedCost" disabled />
    </div>
    <div>
        <p>Name:</p>
        <input class="flex-row" type="text" @bind="@selectedTravelerName" />
    </div>
    <div>
        <p>Citizenship:</p>
        <input class="flex-row" type="text" @bind="@selectedTravelerCitizen" />
    </div>
    <div>
        <p>Status:</p>
        <input class="flex-row" type="text" @bind="@selectedStatus" />
    </div>
    <div style="position: center ; align-items: center;">
        <br />
        <button @onclick="SaveReservations">Save</button>
    </div>
</section> 

@code {

    private List<Reservation> reservations = ReservationManager.GetReservations();
    ReservationManager rm = new ReservationManager();

    private List<Reservation> matchingReservations;

    string selectedReservationCode;
    string selectedFlightCode;
    string selectedAirline;
    string selectedDay;
    string selectedTime;
    string selectedCost;
    string selectedTravelerName;
    string selectedTravelerCitizen;
    string selectedStatus;
    string code = string.Empty;
    string airline = string.Empty;
    string name = string.Empty;

    string errorMessage;

    AirportManager am = new AirportManager();
    FlightManager fm = new FlightManager();

    private List<Airport> airlineList = AirportManager.GetAirportNames();
    private IEnumerable<string> filteredAirlines => airlineList
        .Where(airport => airport.AirportName.Contains(airline, StringComparison.OrdinalIgnoreCase))
        .Select(airport => airport.AirportName);

    //OnFindFlights method: This method is called when the "Find Flights" button is clicked.
    //Calls FindFlights method in FlightManager class and finds flight based on origin, destination and day.
    private void OnFindReservations()
        {
        matchingReservations = rm.FindReservations(code, airline, name, reservations);
        }
     
    //OnShowFlight method: This method is called when a flight is selected from the dropdown.
    //Sets flightCode to value based on change event. Then calls SelectFlight method to display flight information.
    private Reservation reservationSelected;
    private void OnShowFlightReserved(ChangeEventArgs e)
    {
        string reservationcode = e.Value.ToString();
        reservationSelected = matchingReservations.FirstOrDefault(e => e.ReservationCode == code);


        reservationcode = reservationSelected.ReservationCode;
        selectedAirline = reservationSelected.Airline;
        selectedCost = reservationSelected.Cost;
        selectedTravelerName = reservationSelected.TravelerName;
        selectedTravelerCitizen = reservationSelected.TravelerCitizen;
    }
    
    private void SaveReservations()
    {
        rm.UpdateReservation();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "Tab")
        {
            // Prevent the default behavior to handle selection
            await JS.InvokeVoidAsync("event.preventDefault");

            // Example logic to select the first airline in the filtered list
            // You might want to implement more sophisticated selection logic
            if (filteredAirlines.Any())
            {
                SelectAirline(filteredAirlines.First());
            }
        }
    }

    private void SelectAirline(string airline)
    {
        this.airline = airline;
        // Trigger any additional logic needed upon selection
    }
} 