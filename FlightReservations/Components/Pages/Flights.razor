<!--
/* This is the Flights page. This page is used to find flights based on origin, destination and day. 
* It also allows the user to select a flight and make a reservation. 
* The user can enter their name and citizenship to make a reservation.
* 
* The page is divided into three sections: FlightFinder, Flights and Reserve.
*/
-->
   
@page "/flights"
@using FlightReservations.Data
@using System.IO
@using System

<link href="./css/FlightReservation.css" rel="stylesheet" />

<section id="FlightFinder">
    <h1>Flight Finder</h1>
    <div class="flex-container">
        <!-- First Row -->
        <div class=flex-row>
            <div class="flex-item">
                <label for="origin" >From:</label>
            </div>
            <div class="flex-item">
                <label for="destination" >To:</label>
            </div>
            <div class="flex-item">
                <label for="day">Day:</label>
            </div>
            <div class="flex-item">
                <!-- Blank space for alignment -->
            </div>
        </div>
        <!-- Second Row -->
        <div class="flex-row">
            <div class="flex-item">
                <input type="text" id="origin" placeholder="Any" @bind="origin" />
            </div>
            <div class="flex-item">
                <input type="text" id="destination" placeholder="Any" @bind="destination" />
            </div>
            <div class="flex-item">
                <input type="text" id="day" placeholder="Any" @bind="day" />
            </div>
            <div class="flex-item">
                <button type="button" @onclick="OnFindFlights">Find Flights</button>
            </div>
        </div>
    </div>
</section>

<section id="Flights">
    <h2>Flights</h2>
    <!-- Need to filter flights based on origin, destination and day. -->
    <select id="FlightList" class="flex-row" @onchange="OnShowFlight">
        <option disabled selected>Select a flight</option>
        @foreach (var f in flights)
        {
            <option value="@f.Flight_Code">@($"{f.Flight_Code}, {f.Airline}, {f.Origin_Airport}, {f.Destination_Airport}, {f.Day}, {f.Time}, {f.Cost}")</option>
        }
    </select>
</section>

<section id="Reserve"> 
<h2>Reserve</h2>
<div>
    <p>Flight Code:</p>
    <input class="flex-row" type="text" value="@selectedFlightCode" disabled />
</div>
<div>
    <p>Airline:</p>
    <input class="flex-row" type="text" value="@selectedAirline" disabled />
</div>
<div>
    <p>Day:</p>
    <input class="flex-row" type="text" value="@selectedDay" disabled />
</div>
<div>
    <p>Time:</p>
    <input class="flex-row" type="text" value="@selectedTime" disabled />
</div>
<div>
    <p>Cost:</p>
    <input class="flex-row" type="text" value="@selectedCost" disabled />
</div>
<div>
    <p>Name:</p>
    <input class="flex-row" type="text" @bind="@travelerName" />
</div>
<div>
    <p>Citizenship:</p>
    <input class="flex-row" type="text" @bind="@travelerCitizen" />
</div>
    <div class="center-button-container">
    <br/>
    <button @onclick="MakeReservation">Reserve</button>
</div>
</section>

<div class="flex-row align-items-center" style="color:red;"><p>@errorMessage</p></div>
<div class="flex-row align-items-center" ><p>@message</p></div>
<div class="flex-row align-items-center"><p>@reservationCode</p> </div>

@code {
    FlightManager fm = new FlightManager();
    //Loads in list of flights using FlightManager class method GetFlights.
    List<Flight> flights = FlightManager.GetFlights();
    string selectedFlightCode;
    string selectedAirline;
    string selectedDay;
    string selectedTime;
    string selectedCost;
    string origin;
    string destination;
    string day;
    string travelerName;
    string travelerCitizen;
    string errorMessage;
    string reservationCode;
    string message;

    Flight selectedFlight;

    //OnFindFlights method: This method is called when the "Find Flights" button is clicked. 
    //Calls FindFlights method in FlightManager class and finds flight based on origin, destination and day.
    private void OnFindFlights()
    {
        flights = fm.FindFlights(origin, destination, day);
        if (flights.Count > 0)
        {
            //Automatically selects the first flight in dropdown list.
            SelectFlight(flights[0].Flight_Code);
        }
        else
        {
            ClearSelectedFlight();
        }
    }

    //OnShowFlight method: This method is called when a flight is selected from the dropdown.
    //Sets flightCode to value based on change event. Then calls SelectFlight method to display flight information.
    private void OnShowFlight(ChangeEventArgs e)
    {
        string flightCode = e.Value.ToString();
        SelectFlight(flightCode);
    }

    //SelectFlight method: Selects a flight and updates the flight details in the textboxes by binding variables.
    private void SelectFlight(string flightCode)
    {
        selectedFlight = null;
        //Loops throught flights list to find flight.
        foreach (var flight in flights)
        {
            if (flight.Flight_Code == flightCode)
            {
                selectedFlight = flight;
                break; //TODO: do we need break? I think this is not a best practice
            }
        }
        //If flight is found, setting variables to selected flight details to display.
        if (selectedFlight != null)
        {
            selectedFlightCode = selectedFlight.Flight_Code;
            selectedAirline = selectedFlight.Airline;
            selectedDay = selectedFlight.Day;
            selectedTime = selectedFlight.Time;
            selectedCost = selectedFlight.Cost.ToString();
        }
    }

    //ClearSelectedFlight method: Clears the selected flight details from textboxes.
    private void ClearSelectedFlight()
    {
        selectedFlightCode = null;
        selectedAirline = null;
        selectedDay = null;
        selectedTime = null;
        selectedCost = null;
    }
    //MakeReservation method: Error checks. Makes reservation if no exceptions are thrown.
    private void MakeReservation()
    {
        errorMessage = null;

        try
        {
            //TODO: Need to used the exception file for all the exception handling
            //If a reservation is to be made but no flight is selected. Error message displayed.
            if (string.IsNullOrEmpty(selectedFlightCode))
            {
                errorMessage = "Please select a flight before trying to make a reservation.";
                return;
            }

            //If name field is empty. Error message displayed.
            if (string.IsNullOrEmpty(travelerName))
            {
                errorMessage = "Travelers Name is blank. Please enter traveler's name.";
                return;
            }

            //If citizenship field is empty. Error message is displayed.
            if (string.IsNullOrEmpty(travelerCitizen))
            {
                errorMessage = "Travelers Citizenship is blank. Please enter traveler's citizenship.";
                return;
            }

            //Loops throught flights list to find flight.
            foreach (var flight in flights)
            {
                if (flight.Flight_Code == selectedFlightCode)
                {
                    selectedFlight = flight;
                    break;
                }
            }

            //If flight is completely booked. Throw an exception.
            if (selectedFlight.Num_Seats <= 0)
            {
                throw new Exception("Selected flight is fully booked.");
            }

            //If flight is null. Throw an exception.
            if (selectedFlight == null)
            {
                throw new Exception("Selected flight not found.");
            }

            //Reservation object is made.
            Reservation reservation = new Reservation(travelerName, travelerCitizen, selectedFlight);
            reservationCode = reservation.ReservationCode;

            //Save reservation to file
            string reservationCSV = reservation.toCSV();
            SaveReservationCsv(reservationCSV);

            message = "Reservation successful! Reservation Code:";
        }
        catch (UnauthorizedAccessException ex)
        {
            errorMessage = $"Unauthorized access: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        //SaveReservationCsv method: Loads in reservation.csv file, reads file, then appends reservation data.
        void SaveReservationCsv(string reservationCsv)
        {
            // string RESERVATION_TXT = Path.Combine(AppContext.BaseDirectory, "reservation.csv");
            string RESERVATION_TXT = Path.GetFullPath(Path.Combine(AppContext.BaseDirectory, @"..\..\..\..\..\Files\reservation.csv"));
            //Read all existing lines from the file.
            List<string> lines = new List<string>();
            if (File.Exists(RESERVATION_TXT))
            {
                lines = File.ReadAllLines(RESERVATION_TXT).ToList();
            }

            //Append the reservationCsv string to the list of lines.
            lines.Add(reservationCsv);
            //Write all lines back into file.
            File.WriteAllLines(RESERVATION_TXT, lines);

            message = "Reservation saved successfully!";
        }

    }
}
