<!--
/* This is the Flights page. This page is used to find flights based on origin, destination and day.
* It also allows the user to select a flight and make a reservation.
* The user can enter their name and citizenship to make a reservation.
*
* The page is divided into three sections: FlightFinder, Flights and Reserve.
*/
-->
@page "/flights"
@using FlightReservations.Data
@using System.IO
@using System

<link href="./css/FlightReservation.css" rel="stylesheet" />

<section id="FlightFinder">
    <h1>Flight Finder</h1>
    <div class="flex-container">
        <!-- First Row -->
        <div class=flex-row>
            <div class="flex-item">
                <label for="origin">From:</label>
            </div>
            <div class="flex-item">
                <label for="destination">To:</label>
            </div>
            <div class="flex-item">
                <label for="day">Day:</label>
            </div>
            <div class="flex-item">
                <!-- Blank space for alignment -->
            </div>
        </div>
        <!-- Second Row -->
        <div class="flex-row">
            <div class="flex-item">
                <input type="text" id="origin" placeholder="Any" @bind="origin" />
            </div>
            <div class="flex-item">
                <input type="text" id="destination" placeholder="Any" @bind="destination" />
            </div>
            <div class="flex-item">
                <input type="text" id="day" placeholder="Any" @bind="day" />
            </div>
            <div class="flex-item">
                <button type="button" @onclick="OnFindFlights">Find Flights</button>
            </div>
        </div>
    </div>
</section>

<section id="Flights">
    <h2>Flights</h2>
    <select class="flex-row" @onchange="OnShowFlight">
        <option disabled selected>Select a flight</option>
        @foreach (var f in flights)
        {
            <option value="@f.Flight_Code">@($"{f.Flight_Code}, {f.Airline}, {f.Origin_Airport}, {f.Destination_Airport}, {f.Day}, {f.Time}, {f.Cost}")</option>
        }
    </select>
</section>

<section id="Reserve">
    <h2>Reserve</h2>
    <div>
        <p>Flight Code:</p>
        <input class="flex-row" type="text" value="@selectedFlightCode" disabled />
    </div>
    <div>
        <p>Airline:</p>
        <input class="flex-row" type="text" value="@selectedAirline" disabled />
    </div>
    <div>
        <p>Day:</p>
        <input class="flex-row" type="text" value="@selectedDay" disabled />
    </div>
    <div>
        <p>Time:</p>
        <input class="flex-row" type="text" value="@selectedTime" disabled />
    </div>
    <div>
        <p>Cost:</p>
        <input class="flex-row" type="text" value="@selectedCost" disabled />
    </div>
    <div>
        <p>Name:</p>
        <input class="flex-row" type="text" @bind="@travelerName" />
    </div>
    <div>
        <p>Citizenship:</p>
        <input class="flex-row" type="text" @bind="@travelerCitizen" />
    </div>
    <div class="center-button-container">
        <br />
        <button @onclick="MakeReservation">Reserve</button>
    </div>
</section>

<div class="flex-row align-items-center"><p>@errorMessage</p> </div>
<div class="flex-row align-items-center"><p>@reservationCode</p> </div>

@code {
    FlightManager fm = new FlightManager();
    List<Flight> flights = FlightManager.GetFlights();
    string? selectedFlightCode = null;
    string? selectedAirline = null;
    string? selectedDay = null;
    string? selectedTime = null;
    string? selectedCost = null;
    string? origin = null;
    string? destination = null;
    string? day = null;
    string? travelerName = null;
    string? travelerCitizen = null;
    string? errorMessage = null;
    string? reservationCode = null;

    private void OnFindFlights()
    {
        flights = fm.FindFlights(origin, destination, day);
        if (flights.Count > 0)
        {
            SelectFlight(flights[0].Flight_Code);
        }
        else
        {
            ClearSelectedFlight();
        }
    }

    private void OnShowFlight(ChangeEventArgs e)
    {
        string flightCode = e.Value?.ToString() ?? string.Empty;
        SelectFlight(flightCode);
    }

    private void SelectFlight(string flightCode)
    {
        Flight? selectedFlight = flights.FirstOrDefault(f => f.Flight_Code == flightCode);

        if (selectedFlight != null)
        {
            selectedFlightCode = selectedFlight.Flight_Code;
            selectedAirline = selectedFlight.Airline;
            selectedDay = selectedFlight.Day;
            selectedTime = selectedFlight.Time;
            selectedCost = selectedFlight.Cost.ToString();
        }
    }

    private void ClearSelectedFlight()
    {
        selectedFlightCode = null;
        selectedAirline = null;
        selectedDay = null;
        selectedTime = null;
        selectedCost = null;
    }

    private void MakeReservation()
    {
        errorMessage = null;

        try
        {
            if (string.IsNullOrEmpty(selectedFlightCode))
            {
                errorMessage = "Please select a flight before trying to make a reservation.";
                return;
            }

            if (string.IsNullOrEmpty(travelerName))
            {
                errorMessage = "Traveler's Name is blank. Please enter traveler's name.";
                return;
            }

            if (string.IsNullOrEmpty(travelerCitizen))
            {
                errorMessage = "Traveler's Citizenship is blank. Please enter traveler's citizenship.";
                return;
            }

            Flight? selectedFlight = flights.FirstOrDefault(f => f.Flight_Code == selectedFlightCode);

            if (selectedFlight == null)
            {
                throw new Exception("Selected flight not found.");
            }

            if (selectedFlight.Num_Seats <= 0)
            {
                throw new Exception("Selected flight is fully booked.");
            }

            // Generate a reservation code (you can adjust this as needed)
            string reservationCode = GenerateReservationCode(travelerName, travelerCitizen, selectedFlight);

            // Create the reservation with the correct constructor
            Reservation reservation = new Reservation(reservationCode, travelerName, travelerCitizen, selectedFlight);
            this.reservationCode = reservation.ReservationCode;

            string reservationCSV = reservation.ToCSV();
            SaveReservationCsv(reservationCSV);

            errorMessage = "Reservation successful! Reservation Code: " + this.reservationCode;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
    // Method to generate a reservation code
    private string GenerateReservationCode(string name, string citizenship, Flight flight)
    {
        // You can adjust the logic for generating the reservation code here
        return $"{flight.Flight_Code[..3].ToUpper()}{name[..3].ToUpper()}-{citizenship[..3].ToUpper()}";
    }
    void SaveReservationCsv(string reservationCsv)
    {
        try
        {
            string RESERVATION_TXT = @"..\FlightReservations\Files\reservation.csv";
            List<string> lines = new List<string>();
            if (File.Exists(RESERVATION_TXT))
            {
                lines = File.ReadAllLines(RESERVATION_TXT).ToList();
            }

            lines.Add(reservationCsv);
            File.WriteAllLines(RESERVATION_TXT, lines);

            errorMessage = "Reservation saved successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
